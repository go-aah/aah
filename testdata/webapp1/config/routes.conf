####################################################
# webapp1 - Application Routes Configuration
#
# Complete routes configuration reference:
#   https://docs.aahframework.org/routes-config.html
####################################################

#------------------------------------------------------------------------
# Domain and sub-domain configuration goes into section `domains { ... }`
#------------------------------------------------------------------------
domains {

  # Pick your choice of an `unique keyname` to define your domain section
  # in the routes configuration.
  # For e.g.: Domain name/ip address with port no
  localhost {
    name = "webapp1 routes"

    # aah supports multi-domain routes configuration out-of-the-box.
    # `host` used to determine domain routes for the incoming request.
    # For e.g: example.org
    host = "localhost"

    # Redirect trailing slash is to enable automatic redirection if the current
    # route can't be matched but a `route` for the path with (without)
    # the trailing slash exists.
    # Default value is `true`.
    redirect_trailing_slash = true

    # aah supports out-of-the-box `405 MethodNotAllowed` status with `Allow`
    # header as per `RFC7231`. Perfect for RESTful APIs.
    # Default value is `true`.
    #method_not_allowed = true

    # aah framework supports out-of-the-box `OPTIONS` request replies.
    # User defined `OPTIONS` routes take priority over the automatic replies.
    # Perfect for RESTful APIs.
    # Default value is `true`.
    #auto_options = true

    # Default auth is used when route does not have attribute `auth` defined.
    # If you don't define attribute `auth` then framework treats that route as
    # `anonymous` auth scheme.
    # Default value is empty string.
    #default_auth = ""

    cors {
      enable = true
      allow_origins = ["*"]
      allow_credentials = true
    }

    #----------------------------------------------------------------------------
    # Static Routes Configuration
    # To serve static files, it can be directory or individual file.
    # This section optional one, for e.g: RESTful APIs doesn't need this section.
    # Static files are delivered via `http.ServeContent`.
    #
    # Supported features:
    #   * Serve directory
    #   * Serve individual file
    #   * Directory listing
    #
    # Pick your choice of `unique name` for each `directory` or `individual` file
    # static route definition. It is called `route name`.
    # Doc: https://docs.aahframework.org/routes-config.html#section-static
    #----------------------------------------------------------------------------
    static {
      # Static route name, pick a unique one
      public_assets {
        # URL 'path' for serving directory
        # Below definition means '/static/**'
        path = "/assets"

        # Relative to application base directory or an absolute path
        dir = "static"

        # list directory, default is 'false'
        list = true
      }

      # serving single file
      favicon {
        path = "/favicon.ico"

        # Direct file mapping, It can be relative to application base directory
        # or an absolute path. For relative path, it uses below `base_dir` config value.
        file = "img/favicon.ico"

        # Default value for relative path file mapping is `public_assets.dir`
        #base_dir = "assets"
      }

      # Robots Configuration file.
      # Know more: https://en.wikipedia.org/wiki/Robots_exclusion_standard
      robots_txt {
        path = "/robots.txt"
        file = "robots.txt"
      }
    }

    #-----------------------------------------------------------------------------
    # Application routes
    # Doc: https://docs.aahframework.org/routes-config.html#section-routes
    # Doc: https://docs.aahframework.org/routes-config.html#namespace-group-routes
    #-----------------------------------------------------------------------------
    routes {

      #------------------------------------------------------
      # Pick an unique name, it's called `route name`,
      # used for reverse URL.
      #------------------------------------------------------
      index {
        # path is used to match incoming requests
        # It can contain `:name` - Named parameter and
        # `*name` - Catch-all parameter
        path = "/"

        # HTTP method mapping, It can be multiple `HTTP` methods with comma separated
        # Default value is `GET`, it can be lowercase or uppercase
        #method = "GET"

        # The controller to be called for mapped URL path.
        #   * `controller` attribute supports with or without package prefix. For e.g.: `v1/User` or `User`
        #   * `controller` attribute supports both naming conventions. For e.g.: `User` or `UserController`
        controller = "testSiteController"

        # The action/method name in the controller to be called for mapped URL path.
        # Default values are mapped based on `HTTP` method. Refer doc for more info.
        # Default action value for GET is 'Index'.
        #action = "Index"

        # Auth config attribute is used to assign auth scheme for the route.
        # If you do not this attribute then framework acquire value as follows.
        #
        #   - Inherits the parent route `auth` attribute value if present.
        #   - Inherits the `default_auth` attribute config value if defined.
        #   - Otherwise it becomes not defined.
        #
        # When routes auth attribute is not defined; two possible actions are taken:
        #   - If one or more auth schemes are defined in security.auth_schemes { ... }
        #     and routes auth attribute is not defined then framework treats that route as 403 Forbidden.
        #   - Else framework treats that route as anonymous.
        #
        # When you want to define particular route as anonymous then define
        # `auth` attribute as `anonymous`.
        # Default value is empty string.
        auth = "anonymous"

        # Max request body size for this route. If its happen to be `MultipartForm`
        # then this value ignored since `request.multipart_size` config from `aah.conf`
        # is applied.
        #
        # If this value is not provided then global `request.max_body_size` config
        # from `aah.conf` is applied. So use it for specific cases.
        # No default value, global value is applied.
        #max_body_size = "5mb"

        # Optionally you can disable Anti-CSRF check for particular route.
        # There are cases you might need this option. In-general don't disable the check.
        # Default value is `true`.
        #anti_csrf_check = false
      }

      text_get {
        path = "/get-text.html"
        controller = "testSiteController"
        action = "Text"
      }

      test_redirect {
        path = "/test-redirect.html"
        controller = "testSiteController"
        action = "Redirect"
      }

      form_submit {
        path = "/form-submit"
        controller = "testSiteController"
        method = "post"
        action = "FormSubmit"
      }

      create_record {
        path = "/create-record"
        controller = "testSiteController"
        method = "post"
        action = "CreateRecord"
      }

      get_xml {
        path = "/get-xml"
        controller = "testSiteController"
        action = "XML"
      }

      get_jsonp {
        path = "/get-jsonp"
        controller = "testSiteController"
        action = "JSONP"
      }

      secure_json {
        path = "/secure-json"
        controller = "testSiteController"
        action = "SecureJSON"
      }

      trigger_panic {
        path = "/trigger-panic"
        controller = "testSiteController"
        action = "TriggerPanic"
      }

      binary_bytes {
        path = "/binary-bytes"
        controller = "testSiteController"
        action = "BinaryBytes"
      }

      send_file {
        path = "/send-file"
        controller = "testSiteController"
        action = "SendFile"
      }

      hey_cookies {
        path = "/hey-cookies"
        controller = "testSiteController"
        action = "Cookies"
      }

      version_home {
        path = "/doc/:version"
        controller = "Doc"
        action = "VersionHome"
      }

      show_doc {
        path = "/doc/:version/*content"
        controller = "Doc"
        action = "ShowDoc"
      }

    } # end - routes

  } # end - localhost

} # end - domains
