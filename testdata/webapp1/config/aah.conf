###################################################
# webapp1 - aah framework application
#
# Complete configuration reference:
#   https://docs.aahframework.org/app-config.html
###################################################

# Application name (non-whitespace)
# Default value is `basename` of import path.
name = "webapp1"

# Friendly description of application
desc = "aah framework web application"

# Application type, typically either Web or API.
type = "web"

# Application instance name is used when you're running aah application cluster.
# This value is used in the context based logging, it distinguishes your instance
# log from other instances.
#
# Typically you can to pass `instance_name` value via aah external config
# support or Environment variable.
instance_name = $AAH_INSTANCE_NAME

# Configure file path of application PID file to be written.
# Ensure application has appropriate permission and directory exists.
# Default value is `<app-base-dir>/<app-binary-name>.pid`
#pid_file = "/path/to/pidfile.pid"

# -----------------------------------------------------------------
# Server configuration - HTTP
# Doc: https://docs.aahframework.org/app-config.html#section-server
# -----------------------------------------------------------------
server {
  # For unix socket: unix:/tmp/aahframework.sock
  # Default value is `empty` string.
  #address = ""

  # For standard port `80` and `443`, put empty string or a value
  # Default value is 8080.
  #port = ""

  # Header value written as `Server` HTTP header.
  # If you do not want to include `Server` header, comment it out.
  header = "aah-go-server"

  # Valid time units are "s = seconds", "m = minutes"
  timeout {
    # Mapped to `http.Server.ReadTimeout`, is the maximum duration for reading
    # the entire request, including the body.
    #
    # Because ReadTimeout does not let Handlers make per-request decisions on
    # each request body's acceptable deadline or upload rate, most users will
    # prefer to use ReadHeaderTimeout. It is valid to use them both.
    # Default value is `90s`.
    #read = "90s"

    # Mapped to `http.Server.WriteTimeout`, is the maximum duration before timing
    # out writes of the response. It is reset whenever a new request's header is
    # read. Like ReadTimeout, it does not let Handlers make decisions on a
    # per-request basis.
    # Default value is `90s`.
    #write = "90s"

    # aah server graceful shutdown timeout
    # Default value is `60s`.
    #grace_shutdown = "60s"
  }

  # Mapped to `http.Server.MaxHeaderBytes`.
  # Default value is `1mb`.
  #max_header_bytes = "1mb"

  # HTTP server keep alive option.
  # Default value is `true`.
  #keep_alive = true

  ssl {
    # Default value is `false`.
    #enable = false

    # Default value is `empty` string.
    #cert = ""

    # Default value is `empty` string.
    #key = ""

    # Disabling HTTP/2 set it true.
    # Default value is `false`.
    #disable_http2 = true

    # Redirect HTTP => HTTPS functionality does protocol switch, so it works
    # with domain and subdomains.
    # For example:
    #   http://aahframework.org      => https://aahframework.org
    #   http://www.aahframework.org  => https://www.aahframework.org
    #   http://docs.aahframework.org => https://docs.aahframework.org
    redirect_http {
      # Enabling HTTP => HTTPS redirects.
      # Default is value is `false`.
      #enable = true

      # Port no. of HTTP requests to listen.
      # For standard port `80` put empty string or a value.
      # It is required value, no default.
      port = "8080"

      # Redirect code
      # Default value is `307`.
      #code = 307
    }

    lets_encrypt {
      # To get SSL certificate from Let's Encrypt CA, enable it.
      # Don't forget to enable `server.ssl.enable=true`.
      # Default value is `false`.
      #enable = false

      # Host policy controls which domains the autocert will attempt
      # to retrieve new certificates for. It does not affect cached certs.
      # It is required, no default value.
      host_policy = ["example.org", "docs.example.org"]

      # Renew before optionally specifies how early certificates should
      # be renewed before they expire.
      # Default value is `10` days.
      #renew_before = 10

      # Email optionally specifies a contact email address. This is used by CAs,
      # such as Let's Encrypt, to notify about problems with issued certificates.
      # If the Client's account key is already registered, Email is not used.
      #email = "jeeva@myjeeva.com"

      # Force RSA makes the autocert generate certificates with 2048-bit RSA keys.
      # If false, a default is used. Currently the default is
      # EC-based keys using the P-256 curve.
      #force_rsa = false

      # Cache optionally stores and retrieves previously-obtained certificates
      # autocert manager. By default certs will only be cached for the lifetime
      # of the autocert manager.
      #
      # autocert manager passes the Cache certificates data encoded in PEM,
      # with private/public parts combined in a single Cache.Put call,
      # private key first.
      # Default value is `empty` string.
      #cache_dir = "/Users/jeeva/autocert"
    }
  }

  # --------------------------------------------------------------------------
  # To manage aah server effectively it is necessary to know details about the
  # request, response, processing time, client IP address, etc. aah framework
  # provides the flexible and configurable access log capabilities.
  # Doc: https://docs.aahframework.org/server-access-log.html
  # --------------------------------------------------------------------------
  access_log {
    # Enabling server access log
    # Default value is `false`.
    enable = true

    # Absolute path to access log file or relative path.
    # Default location is application logs directory
    #file = "webapp1-access.log"

    # Default server access log pattern
    pattern = "%clientip %custom:- %reqtime %reqid %reqmethod %requrl %reqproto %resstatus %ressize %restime %reqhdr:referer %querystr %reqhdr:Accept-Encoding %reshdr:Not-Exists %reshdr:X-Content-Type-Options"

    # Access Log channel buffer size
    # Default value is `500`.
    #channel_buffer_size = 500

    # Include static files access log too.
    # Default value is `true`.
    #static_file = false
  }

  # -------------------------------------------------------
  # Dump Request & Response Details
  # Such as URL, Proto, Headers, Body, etc.
  # Note: Dump is not applicable for Static Files delivery.
  # Doc: https://docs.aahframework.org/server-dump-log.html
  # -------------------------------------------------------
  dump_log {
    # Default value is `false`.
    enable = true

    # Absolute path to dump log file or relative path.
    # Default location is application logs directory
    #file = "webapp1-dump.log"

    # Log Request body into dump log. aah dumps body for JSON, XML, Form
    # HTML and Plain Text content types.
    # Default value is `false`.
    request_body = true

    # Log Request body into dump log. aah dumps body for JSON, XML, Form
    # HTML, and Plain Text content types.
    # Default value is `false`.
    response_body = true
  }
}

# ------------------------------------------------------------------
# Request configuration
# Doc: https://docs.aahframework.org/app-config.html#section-request
# ------------------------------------------------------------------
request {
  # aah framework encourages to have unique `Request Id` for each incoming
  # request, it helps in traceability. If request has already `sX-Request-Id`
  # HTTP header then it does not generate one.
  id {
    # Default value is `true`.
    enable = true

    # Default value is `X-Request-Id`, change it if you have different one.
    #header = "X-Request-Id"
  }

  # Max request body size for all incoming HTTP requests except `MultipartForm`.
  # Also you can override this size for individual route on specific cases
  # in `routes.conf` if need be.
  # Default value is `5mb`.
  #max_body_size = "5mb"

  # Default value is `32mb`, choose your value based on your use case
  #multipart_size = "32mb"

  # aah provides `Content Negotiation` feature for the incoming HTTP request.
  # Read more about implementation and RFC details here GitHub #75.
  # Perfect for REST API, also can be used for web application too if needed.
  content_negotiation {
    # To enable Content Negotiation for the application.
    # Default value is `false`.
    enable = true

    # For example: Client sends Content-Type header as `application/xml`.
    # However server only supports JSON payload as request body.
    # Then server responds with 415 Unsupported Media Type.
    # Default value is empty list and disabled.
    accepted = ["application/json", "text/json", "*/*"]

    # For example: Client sends Accept header as `application/xml`.
    # However server only supports serving JSON i.e. `application/json`.
    # Then server responds with 406 Not Acceptable.
    # Default value is empty list and disabled.
    offered = ["application/json", "text/json", "*/*"]
  }

  # Auto Bind configuration used to bind request parameters to controller
  # action parameters.
  auto_bind {
    # Priority is used to select the bind source priority.
    #   P -> Path Parameter
    #   F -> Form Parameter
    #   Q -> Query Parameter
    #
    # For example: Let's say you have a controller action named `OrderInfo` and its has
    # parameter called `orderId`. So framework tries to parse and bind based
    # on the priority. The `orderId` present in `Path` and `Form`, framework
    # binds the value from `Path`. Typically recommended to have unique names
    # in the request parameter though :)
    #   Path -> Form -> Query
    # If not found then it returns with default Go zero value.
    #
    # Default value is `PFQ`.
    #priority = "PFQ"

    # Tag Name is used for bind values to struct exported fields.
    # Default value is `bind`.
    #tag_name = "bind"
  }
}
# ---------------------------------------------------------------
# i18n configuration
# Doc: https://docs.aahframework.org/app-config.html#section-i18n
# ---------------------------------------------------------------
i18n {
  # It is used as fallback if framework is unable to determine the
  # locale from HTTP Request.
  # Default value is `en`.
  #default = "en"

  # Overriding Request Locale `Accept-Language` header value via URL Path
  # parameter or URL Query parameter.
  param_name {
    # Specify URL Path Param name i.e. `/:lang/home.html`, `/:lang/aboutus.html`, etc.
    # For e.g.: `/en/home.html`, `/en/aboutus.html`, `/zh-CN/home.html`, `/zh-CN/aboutus.html` etc.
    # Default value is `lang`.
    #path = "locale"

    # Specify URL Query Param name i.e `?lang=en`, `?lang=zh-CN`, etc.
    # Default value is `lang`.
    #query = "locale"
  }
}

# -----------------------------------------------------------------
# Format configuration
# Doc: https://docs.aahframework.org/app-config.html#section-format
# -----------------------------------------------------------------
format {
  # Time format for auto parse and bind. aah tries to parse the
  # time value in the order they defined till it gets success
  # otherwise returns the error.
  time = [
    "2006-01-02T15:04:05Z07:00",
    "2006-01-02T15:04:05Z",
    "2006-01-02 15:04:05",
    "2006-01-02"
  ]
}

# ------------------------------------------------------------------
# Runtime configuration
# Doc: https://docs.aahframework.org/app-config.html#section-runtime
# ------------------------------------------------------------------
runtime {
  debug {
    # Choose an appropriate buffer size for collecting all goroutines stack trace
    # dump based on your case.
    # Default value is `2mb`.
    #stack_buffer_size = "2mb"

    # Whether to collect all the Go routines details or not.
    # Default value is `false`.
    #all_goroutines = true

    # Whether to strip source `src` base path from file path.
    # Default value is `false`.
    #strip_src_base = true
  }
}

# -----------------------------------------------------------------
# Render configuration
# Doc: https://docs.aahframework.org/app-config.html#section-render
# -----------------------------------------------------------------
render {
  # aah framework chooses the `Content-Type` value automatically based on
  # configuration if `aah.Reply()` builder value is not set. It selects in
  # the order of:
  #  - Based on URL file extension, supported `.html`, `.htm`, `.json`, `.js`, `.xml` and `.txt`
  #  - Request Accept Header - Most Qualified one as per RFC7321
  #  - Based `render.default` value supported types are `html`, `json`, `xml` and `text`
  #  - Finally aah framework uses `http.DetectContentType` API
  # Default value is `empty` string.
  default = "html"

  # Pretty print option is helpful in `dev` environment profile.
  # It is only applicable to JSON and XML.
  # Default value is `false`.
  #pretty = true

  # Gzip compression configuration for HTTP response.
  gzip {
    # By default Gzip compression is enabled in aah framework, however
    # framework ensures HTTP client accepts Gzip response otherwise
    # it won't use Gzip compression.
    #
    # Tips: If you have nginx or apache web server enabled with gzip in-front
    # of aah server the set this value to `false`.
    #
    # Default value is `true`.
    #enable = true

    # Used to control Gzip compression levels. Valid levels are
    # 1 = BestSpeed to 9 = BestCompression.
    # Default value is `4`.
    #level = 4
  }
}
# ------------------------------------------------------------------
# Cache configuration
# Doc: https://docs.aahframework.org/static-files.html#cache-control
# ------------------------------------------------------------------
cache {
  static {
    # Default `Cache-Control` for all static files,
    # if specific mime type is not defined.
    default_cache_control = "public, max-age=31536000"

    # Define by mime types, if mime is not present then default is applied.
    # Config is very flexible to define by mime type.
    #
    # Create a unique name and provide `mime` with comma separated value
    # and `cache_control`.
    mime_types {
       css_js {
         mime = "text/css, application/javascript"
         cache_control = "public, max-age=604800, proxy-revalidate"
       }

       images {
         mime = "image/jpeg, image/png, image/gif, image/svg+xml, image/x-icon"
         cache_control = "public, max-age=2628000, proxy-revalidate"
       }
    }
  }
}

# ---------------------------------------------------------------
# View configuration
# Doc: https://docs.aahframework.org/app-config.html#section-view
# ---------------------------------------------------------------
view {
  # Choosing view engine for application. You could implement
  # on your own with simple interface `view.Enginer`.
  # Default value is `go`.
  engine = "go"

  # Choose your own view file extension.
  # Default value is chosen based on `view.engine`,
  # while creating a new app using command `aah new`.
  ext = ".html"

  # Choose whether you need a case sensitive view file resolve or not.
  # For e.g.: "/views/pages/app/login.tmpl" == "/views/pages/App/Login.tmpl"
  # Default value is `false`.
  #case_sensitive = false

  # To use custom Go template delimiters for view files.
  # Default value is `{{.}}`.
  #delimiters = "{{.}}"

  # Framework chooses the default app layout as `master.html` if you do not
  # provide one. However you may have pages or template without layout too.
  # So option to disable the default layout for HTML.
  # Default value is `true`. Available since v0.6
  #default_layout = false
}

# --------------------------------------------------------------
# Application Security
# Doc: https://docs.aahframework.org/security-config.html
# --------------------------------------------------------------
include "./security.conf"

# --------------------------------------------------------------
# Environment Profiles e.g.: dev, qa, prod
# Doc: https://docs.aahframework.org/app-config.html#section-env
# --------------------------------------------------------------
env {
  # Indicates active profile name for application configuration.
  # Default value is `dev`.
  #active = "dev"

  # ----------------------------------
  # Environment profile configurations
  # ----------------------------------
  include "./env/*.conf"
}
